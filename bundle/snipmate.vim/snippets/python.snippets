snippet #!
	#!/usr/bin/env python

snippet imp
	import ${1:module}
snippet from
	from ${1:module} import ${2:*}
# Module Docstring
snippet if
	if ${1:condition}:
		${2:#code}
snippet elif
	elif (${1:condition}):
		${2:#code}
snippet docs
	'''
	File: ${1:`Filename('$1.py', 'foo.py')`}
	Author: ${2:`g:snips_author`}
	Description: ${3}
	'''
snippet wh
	while ${1:condition}:
		${2:# code...}
snippet for
	for ${1:needle} in ${2:haystack}:
		${3:# code...}
# New Class
snippet cl
	class ${1:`Filename("", "untitled")`}(${2:object}):
		"""${3:$1}"""
		def __init__(self):
			${5:super($1, self).__init__()}
# New Function
snippet def
	def ${1:fname}(${2:`indent('.') ? 'self' : ''`}):
		"""${3:docstring for $1}"""
		${4:pass}
snippet deff
	def ${1:fname}(${2:`indent('.') ? 'self' : ''`}):
		${3}
# New Method
snippet defs
	def ${1:mname}(self, ${2:arg}):
		${3:pass}
# New Property
snippet property
	def ${1:foo}():
		doc = "${2:The $1 property.}"
		def fget(self):
			${3:return self._$1}
		def fset(self, value):
			${4:self._$1 = value}
# Lambda
snippet ld
	${1:var} = lambda ${2:vars} : ${3:action}
snippet .
	self.
snippet try Try/Except
	try:
		${1:pass}
	except ${2:Exception}, ${3:e}:
		${4:raise $3}
snippet try Try/Except/Else
	try:
		${1:pass}
	except ${2:Exception}, ${3:e}:
		${4:raise $3}
	else:
		${5:pass}
snippet try Try/Except/Finally
	try:
		${1:pass}
	except ${2:Exception}, ${3:e}:
		${4:raise $3}
	finally:
		${5:pass}
snippet try Try/Except/Else/Finally
	try:
		${1:pass}
	except ${2:Exception}, ${3:e}:
		${4:raise $3}
	else:
		${5:pass}
	finally:
		${6:pass}
# if __name__ == '__main__':
snippet ifmain
	def $1():
		pass


	if __name__ == '__main__':
		${1:main}()
# __magic__
snippet _
	__${1:init}__${2}
snippet re
	return
snippet with
	with ${1:code} as ${2:my_file}:
		${3:pass}
snippet header
	# -*- coding: utf-8; -*-
	#!/usr/bin/env python

	__author__ = 'Olexander Yermakov'
	__email__ = 'mannavard1611@gmail.com'


snippet args
	def get_args():
	    '''Parse command line arguments.'''
	    parser = argparse.ArgumentParser()
	    parser.add_argument('--example',
							dest='example',
	            			type=str,
	            			help='example',
	            			required=True)
	
	    return parser.parse_args()
snippet miter
	def __iter__(self):
		for $1 in ${2:self.data}:
			yield ${1:elem}
snippet mget
	def __getitem__(self, ${1:key}):
		return ${2:self.data}[$1]
snippet mset
	def __setitem__(self, ${1:key}, ${2:item}):
		${3:self.data}[$1] = $2
snippet mdelitem
	def __delitem__(self, ${1:key}):
		del ${2:self.data}[$1]
